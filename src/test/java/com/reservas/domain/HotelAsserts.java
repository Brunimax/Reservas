package com.reservas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HotelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelAllPropertiesEquals(Hotel expected, Hotel actual) {
        assertHotelAutoGeneratedPropertiesEquals(expected, actual);
        assertHotelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelAllUpdatablePropertiesEquals(Hotel expected, Hotel actual) {
        assertHotelUpdatableFieldsEquals(expected, actual);
        assertHotelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelAutoGeneratedPropertiesEquals(Hotel expected, Hotel actual) {
        assertThat(expected)
            .as("Verify Hotel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelUpdatableFieldsEquals(Hotel expected, Hotel actual) {
        assertThat(expected)
            .as("Verify Hotel relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getQuantidadeQuartos()).as("check quantidadeQuartos").isEqualTo(actual.getQuantidadeQuartos()))
            .satisfies(e -> assertThat(e.getVagas()).as("check vagas").isEqualTo(actual.getVagas()))
            .satisfies(e -> assertThat(e.getClassificacao()).as("check classificacao").isEqualTo(actual.getClassificacao()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCep()).as("check cep").isEqualTo(actual.getCep()))
            .satisfies(e -> assertThat(e.getBairro()).as("check bairro").isEqualTo(actual.getBairro()))
            .satisfies(e -> assertThat(e.getEndereco()).as("check endereco").isEqualTo(actual.getEndereco()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelUpdatableRelationshipsEquals(Hotel expected, Hotel actual) {
        assertThat(expected)
            .as("Verify Hotel relationships")
            .satisfies(e -> assertThat(e.getMunicipio()).as("check municipio").isEqualTo(actual.getMunicipio()))
            .satisfies(e -> assertThat(e.getPessoa()).as("check pessoa").isEqualTo(actual.getPessoa()));
    }
}
